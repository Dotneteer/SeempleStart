<%-- 
    This template generates a DTO object from a database table
--%>
<%@ Template Language="C#" TargetLanguage="C#" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the data record should be based on." %>
<%@ Property Name="Namespace" Type="System.String" Category="2. Target"
	Description="Target namespace" %>
    
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
    
using System;

namespace <%= Namespace %>
{
    // --- This class has been automatically generated from the database schema
    // --- <%= DateTime.Now %>
    public class <%= SourceTable.Name %>Dto
    {
<%
foreach (var field in SourceTable.Columns)
{
%>    
        public <%= GetClrType(field) %> <%= field.Name %> { get; set; }
<%
}
%>
    }
    
    public static class MapperHelper
    {
        /// <summary>
        /// Maps the specified <%= SourceTable.Name %>Record to a <%= SourceTable.Name %>Dto instance
        /// </summary>
        /// <param name="record"><%= SourceTable.Name %>Record to map</param>
        /// <returns><%= SourceTable.Name %>Dto instance</returns>
        public static <%= SourceTable.Name %>Dto Map<%= SourceTable.Name %>(<%= SourceTable.Name %>Record record)
        {
            return new <%= SourceTable.Name %>Dto
            {
<%
for (var i = 0; i < SourceTable.Columns.Count; i++)
{
   var field = SourceTable.Columns[i];
%>    
                <%= field.Name %> = record.<%= field.Name %><%= i < SourceTable.Columns.Count - 1 ? "," : "" %>
<%
}
%>
            };
        }

        /// <summary>
        /// Maps the specified <%= SourceTable.Name %>Dto to a <%= SourceTable.Name %>Record instance
        /// </summary>
        /// <param name="dto"><%= SourceTable.Name %>Dto to map</param>
        /// <returns><%= SourceTable.Name %>Record instance</returns>
        public static <%= SourceTable.Name %>Record Map<%= SourceTable.Name %>(<%= SourceTable.Name %>Dto dto)
        {
            return new <%= SourceTable.Name %>Record
            {
<%
for (var i = 0; i < SourceTable.Columns.Count; i++)
{
   var field = SourceTable.Columns[i];
%>    
                <%= field.Name %> = dto.<%= field.Name %><%= i < SourceTable.Columns.Count - 1 ? "," : "" %>
<%
}
%>
            };
        }
    }
}

<script runat="template">
// My methods here.
public string GetClrType(ColumnSchema column)
{
    string t;
    bool r = false;
    switch (column.DataType)
    {
        case DbType.AnsiString:
        case DbType.AnsiStringFixedLength:
        case DbType.String:
        case DbType.StringFixedLength:
        case DbType.Xml:
            t = "string";
            r = true;
            break;
        case DbType.Boolean:
            t = "bool";
            break;
        case DbType.Byte:
            t = "byte";
            break;
        case DbType.Binary:
            t = "byte[]";
            r = true;
            break;
        case DbType.Currency:
        case DbType.Decimal:
        case DbType.VarNumeric:
            t = "decimal";
            break;
        case DbType.Date:
        case DbType.DateTime:
        case DbType.DateTime2:
        case DbType.Time:
            t = "DateTime";
            break;
        case DbType.DateTimeOffset:
            t = "DateTimeOffset";
            break;
        case DbType.Double:
            t = "double";
            break;
        case DbType.Guid:
            t = "Guid";
            break;
        case DbType.Int16:
            t = "short";
            break;
        case DbType.Int32:
            t = "int";
            break;
        case DbType.Int64:
            t = "long";
            break;
        case DbType.Object:
            t = "object";
            r = true;
            break;
        case DbType.SByte:
            t = "sbyte";
            break;
        case DbType.Single:
            t = "float";
            break;
        case DbType.UInt16:
            t = "ushort";
            break;
        case DbType.UInt32:
            t = "uint";
            break;
        case DbType.UInt64:
            t = "ulong";
            break;
        default:
            t ="#";
            break;
  }
  if (!r && column.AllowDBNull)
  {
      t += "?";
  }
  return t;
}

public string CamelCase(string str)
{
    return str.Substring(0, 1).ToLower() + str.Substring(1);
}

</script>