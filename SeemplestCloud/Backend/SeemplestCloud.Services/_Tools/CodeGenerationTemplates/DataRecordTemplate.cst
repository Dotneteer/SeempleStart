<%-- 
    This template generates a DataRecord<> class from a database table
--%>
<%@ Template Language="C#" TargetLanguage="C#" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the data record should be based on." %>
<%@ Property Name="Namespace" Type="System.String" Category="2. Target"
	Description="Target namespace" %>
    
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
    
using System;
using Seemplest.Core.DataAccess.Attributes;
using Seemplest.Core.DataAccess.DataRecords;

namespace <%= Namespace %>
{
    // --- This class has been automatically generated from the database schema
    // --- <%= DateTime.Now %>
    [TableName("<%= SourceTable.Name %>")]
    [SchemaName("<%= SourceTable.Owner %>")]
    public class <%= SourceTable.Name %>Record: DataRecord<<%= SourceTable.Name %>Record>
    {
<%
foreach (var field in SourceTable.Columns)
{
%>    
        private <%= GetClrType(field) %> _<%= CamelCase(field.Name) %>;
<%
}

foreach (var field in SourceTable.Columns)
{
%>    

<%
    if (SourceTable.HasPrimaryKey)
    {
        var keyCount = SourceTable.PrimaryKey.MemberColumns.Count;
        var keyIndex = SourceTable.PrimaryKey.MemberColumns.IndexOf(field);
        if (keyIndex >= 0)
        {
            var keyValue = keyCount == 1 ? "" : "(" + (keyIndex + 1).ToString() + ")";
%>
        [PrimaryKey<%= keyValue %>]
<%
        }
    }
    if ((bool)field.ExtendedProperties["CS_IsIdentity"].Value)
    {
%>
        [AutoGenerated]
<%
    }
    if ((bool)field.ExtendedProperties["CS_IsComputed"].Value)
    {
%>
        [Calculated]
<%
    }
%>   
        public <%= GetClrType(field) %> <%= field.Name  %>
        {
            get { return _<%= CamelCase(field.Name) %>; }
            set { _<%= CamelCase(field.Name) %> = Modify(value, "<%= field.Name%>"); }
        }
<%
}
%>
    }
}

<script runat="template">
// My methods here.
public string GetClrType(ColumnSchema column)
{
    string t;
    bool r = false;
    switch (column.DataType)
    {
        case DbType.AnsiString:
        case DbType.AnsiStringFixedLength:
        case DbType.String:
        case DbType.StringFixedLength:
        case DbType.Xml:
            t = "string";
            r = true;
            break;
        case DbType.Boolean:
            t = "bool";
            break;
        case DbType.Byte:
            t = "byte";
            break;
        case DbType.Binary:
            t = "byte[]";
            r = true;
            break;
        case DbType.Currency:
        case DbType.Decimal:
        case DbType.VarNumeric:
            t = "decimal";
            break;
        case DbType.Date:
        case DbType.DateTime:
        case DbType.DateTime2:
        case DbType.Time:
            t = "DateTime";
            break;
        case DbType.DateTimeOffset:
            t = "DateTimeOffset";
            break;
        case DbType.Double:
            t = "double";
            break;
        case DbType.Guid:
            t = "Guid";
            break;
        case DbType.Int16:
            t = "short";
            break;
        case DbType.Int32:
            t = "int";
            break;
        case DbType.Int64:
            t = "long";
            break;
        case DbType.Object:
            t = "object";
            r = true;
            break;
        case DbType.SByte:
            t = "sbyte";
            break;
        case DbType.Single:
            t = "float";
            break;
        case DbType.UInt16:
            t = "ushort";
            break;
        case DbType.UInt32:
            t = "uint";
            break;
        case DbType.UInt64:
            t = "ulong";
            break;
        default:
            t ="#";
            break;
  }
  if (!r && column.AllowDBNull)
  {
      t += "?";
  }
  return t;
}

public string CamelCase(string str)
{
    return str.Substring(0, 1).ToLower() + str.Substring(1);
}

</script>
