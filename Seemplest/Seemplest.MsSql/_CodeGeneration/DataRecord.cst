<%@ CodeTemplate Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="C#" Description="Generates a typed DataSet class based on a database table schema." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the DaraRecord definition should contain." %>
<%@ Property Name="ClassSuffix" Type="String" Default="Record" %>
<%@ Property Name="Namespace" Type="String" Default="Seemplest.MsSql.Records" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text" %>

// --- This file has been automatically generated with the DataRecord.cst template
// --- <%= DateTime.UtcNow.ToString("u") %>

using System;
using System.Diagnostics.CodeAnalysis;
using Seemplest.Core.SqlServer;

namespace <%= Namespace %>
{
    [SchemaName("<%= SourceTable.Owner %>")]
    [TableName("<%= SourceTable.Name %>")]
    [ExcludeFromCodeCoverage]
	public class <%= GetClassName(SourceTable.Name) %><%= ClassSuffix %>: DataRecord<<%= GetClassName(SourceTable.Name) %><%= ClassSuffix %>>
	{
        // --- Fields for data columns
        <% foreach(var column in SourceTable.Columns) {%>
        private <%= column.SystemType.Name %> <%= GetFieldName(column.Name) %>;
        <% }%>
        
        // --- Data column properties
        <% var hasField = false; %>
        <% foreach(var column in SourceTable.Columns) {%>
        <% if (hasField) { %>
        
        <% } %>
        <% hasField = true; %>
        [ColumnName("<%= column.Name %>")]
        <% if (column.IsPrimaryKeyMember) {%>
            <%  for(int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) {
                var key = SourceTable.PrimaryKey.MemberColumns[i];
                if (key.Name == column.Name) { %>
        [PrimaryKey<% if (i > 0) { %>(<%= i %>)<% }%>]
                <% } %>
                <% if ((bool)key.ExtendedProperties["CS_IsIdentity"].Value) { %>
        [AutoGenerated]
                <% } %>
            <% } %>
        <% } %>
        public <%= column.SystemType.Name %> <%= GetClassName(column.Name) %>
        {
            get { return <%= GetFieldName(column.Name) %>; }
            set
            {
                <%= GetFieldName(column.Name) %> = Modify(value, "<%= GetClassName(column.Name) %>");
            }
        }
        <% }%>
    }
}
    
<script runat="template">

	public string GetClassName(string value)
	{
		return value.Replace(" ", "");
	}
	
	public string GetFieldName(string value)
	{
		return "_" + value.Substring(0, 1).ToLower() + value.Substring(1).Replace(" ", "");
	}
    
</script>